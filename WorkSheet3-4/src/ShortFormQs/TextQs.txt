1.  Write down three differences between abstract classes and interfaces in Java 8.
    Provide examples to illustrate your answer.

    1)  An abstract class does not support multiple inheritance where as an interface does, for example class1 extends
        abstractClass and class2 extends abstractClass is not valid where as class1 implements interface and class2
        implements interface is valid.

    2)  An abstract class can have constructors and an interface cannot

        eg. public abstract class abstractClass{
                public abstractClass(){
                //constructor
            }
            The above class is valid where as if it was declared an interface it would not be.

    3)  An abstract class inherits all of the methods belonging to Object where as an interface does not inherit any
        methods

2.  Are the following true or false?
    Provide examples to illustrate your answers

    (a) Every interface must have at least one method.

        False - Java marker interfaces have no members but are used as a tag to provide the compiler with a message
                about any special functionality which needs to added to the class implementing it.


    (b) An interface can declare instance fields that an implementing class must also declare.

        False - Any variable declared in an interface will be public static final and as it is static it cannot be
                called an instance variable.

    (c) Although you canâ€™t instantiate an interface, an interface definition can declare constructor methods that
        require an implementing class to provide constructors with given signatures.

        False - An interface cannot provide constructor methods it can only declare default methods which does not
                include a constructor as the default constructor, the one without arguments, will be in the class
                already.

3.  Provide an example of an interface with methods that do not imply responsibility on the part of the implementing
    class to take action on behalf of the caller or to return a value.

    This could happen if a class is initiated as an event listener which will therefore be implementing the interface
    ActionListener, this would therefore cause the class itself to receive an instruction to take action on behalf of
    the caller rather than notify the caller that action is required.

4.  What is the value of a stub class like WindowAdapter which is composed of methods that do nothing?

    By creating the stub class WindowAdaptor with empty methods it allows developers to create a sub class
    of the WindowAdaptor and then only create implementations of the methods which are important to their application.

5.  How can you prevent other developers from constructing new instances of your class?
    Provide appropriate examples to illustrate your answer.

    This can be done by using the singleton design pattern which only allows for one instance of a class to be created.
    The singleton design pattern uses a single constructor with private access and then there will be a static
    reference to the instance of the sole singleton instance and a return reference to that instance.

    Eg. public class Singleton {

            private static Singleton singleton = new Singleton;;

            private Singleton(){}

            public static Singleton getSingleton(){
                return singleton;
            }
        }

        Then from another class the singleton is called as follows:

        public class SingletonEG{

            public static void main(String[] args){
                Singleton single = Singleton.getSingleton();
                }
        }

6.  Why might you decide to lazy-initialise a singleton instance rather than initialise it in its field declaration?
    Provide examples of both approaches to illustrate your answer

    Lazy-initialisation is used when the developer deems some of the data to be expensive for some reason and therefore
    doesn't want to run a piece of code until it is absolutely necessary. Eager as above, lazy as below:

    An example of a lazy-initialised singleton method is below:

    public static Singleton getSingleton() {
        if (singleton == null)
            singleton = new Singleton();
        // ...
        return singleton;
    }

    more to do

7.  Using the java.util.Observable and java.util.Observer classes/interfaces show how one object can be informed of
    updates to another object.



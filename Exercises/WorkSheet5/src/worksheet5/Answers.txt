1.  (a) Briefly describe the Strategy Design Pattern?

    It is a design pattern which allows for an algorithm's beahvoiur to be selected at runtime. The pattern does this by
    defining a family of algorithms, encapsulating each algorightm and then making these algorithms interchangeable
    within the defined family.


    (b) When is it appropriate to use the Strategy Design Pattern?

    When you want to define classes that have behavoiur that will have one behavoiur which is similar to certain other
    behaviours in a list, or when you need to use one or several bahavours dynamically.

3.  When is it appropriate to use the Abstract Factory design pattern?

    If you have a lot objects that can be added, or changed dynamically during runtime.

5.  “In general, the details of object construction, such as instantiating and initialising the components that
    comprise the object, are kept within the object, often as part of its constructor.”

    Comment on this statement with reference to modularity and construction bloat

    This can result in code becoming lenghty which increases construction bloat and results in the a less modular
    solution.

7.  (a) What is the Facade Pattern?

    When you create a simple interface that performs many other actions behind the scenes.

    (b) When, and why, would you use the Facade Pattern?

    The facade pattern is used when you want to shield the user from the details of the system in order to provide an
    easy to use simplified view of the system. A classic example is a bank account set up where the user will
    want to withdraw, deposit or check the account and this will be performed through one simple interface linking to
    a number of other classes.

9.  When should one make use of the Bridge Design Pattern?

    When it is necessary to decouple the abstraction from it's actual implementation in order to allow both parts to
    vary independently.